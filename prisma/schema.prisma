generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Interviews {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  image         String
  createdAt     DateTime @default(now())
  title         String
  post          String
  revenue       Int
  updates       Int
  website       String
  category      String
  tags          String[]
  author        User     @relation(fields: [authorclerkId], references: [clerkId], onDelete: Cascade)
  authorclerkId String
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  author        User      @relation(fields: [authorclerkId], references: [clerkId], onDelete: Cascade)
  authorclerkId String
  title         String
  body          String
  role          String
  createdAt     DateTime  @default(now())
  views         Int       @default(0)
  likes         String[]
  image         String
  altText       String
  comments      Comment[]
  tags          String[]
  groupId       String?
  share         Int       @default(0)
  report        Report[]
  country       String
}

// "onDelete: Cascade" in Comment model mean, when the post deleted, all related comments will be deleted as well same thing happen in Post model

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  authorImage String
  comment     String
  likes       String[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now()) @updatedAt
  Post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?  @db.ObjectId
  parentId    String?  @db.ObjectId
  type        String
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  postId     String?  @db.ObjectId
  Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  reasons    String[]
  reportedBy String
}

model Tag {
  title   String   @map("_id")
  postIds String[]

  @@id([title])
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  postTitle   String
  authorName  String
  authorImage String
  message     String?
  isRead      Boolean          @default(false)
  typeText    String
  postId      String
  type        NotificationType
  User        User?            @relation(fields: [userId], references: [id])
  userId      String?          @db.ObjectId
}

enum NotificationType {
  reactions
  comment
  publish
  mentions
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  clerkId    String       @unique
  email      String       @unique
  name       String
  image      String
  interviews Interviews[]
  posts      Post[]

  createdAt          DateTime @default(now())
  updateAt           DateTime @default(now()) @updatedAt
  onboardingProgress String   @default("")
  businessStage      String?
  codingLevel        String?
  businessTypes      String[]

  notifications Notification[]
  Meetups       Meetups[]
  Podcasts      Podcasts[]
}

model Meetups {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  companyName   String
  location      String
  description   String
  tags          String[]
  image         String
  category      String
  createdAt     DateTime @default(now())
  updateAt      DateTime @default(now()) @updatedAt
  author        User     @relation(fields: [authorclerkId], references: [clerkId], onDelete: Cascade)
  authorclerkId String
}

model Podcasts {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  location      String
  post          String
  category      String
  image         String
  audio         String
  createdAt     DateTime @default(now())
  updateAt      DateTime @default(now()) @updatedAt
  author        User     @relation(fields: [authorclerkId], references: [clerkId], onDelete: Cascade)
  authorclerkId String
}
